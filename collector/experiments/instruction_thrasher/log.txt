Monday 18th of Dec 2017
* Design a cash thrasher
* Design an instruction thrasher
* Combine


Thursday 21st of Dec 2017
* No need to make a cache thrasher. Simple instruction thrasher shows that
  the instruction counter does not count the branch miss predictions. Here
  is an example of the results of the run with LENGTH as 131072:
  UnO sum,   UnO bmiss,    UnO inst,     Ord sum,   Ord bmiss,    Ord inst
   4145268,       65820,     1701660,     4145268,          15,     1701660
   4153734,       65625,     1701245,     4153734,          21,     1701244
   4143751,       65550,     1700277,     4143751,          20,     1700276
   4178495,       65223,     1703057,     4178495,          20,     1703056
   4151532,       65731,     1701309,     4151532,          14,     1701308
   4164333,       65616,     1701868,     4164333,          22,     1701868
   4170000,       65501,     1701513,     4170000,          21,     1701512
   4141210,       65346,     1701813,     4141210,          25,     1701812
   4171233,       65392,     1701961,     4171233,          16,     1701960
   4165100,       65571,     1701789,     4165100,          21,     1701788
.

  A considerable ~65k bmiss difference is shown only with one or no difference
  instruction count.

  To conclude, I do not think that bmiss is represented in instruction count.
  The 30 Million instruction difference has not been explained.



Friday 19th of Jan 2018:
* I was wrong. Found it. It happens when the list length gets bigger than 1 M.
  Here is another test:
	  UnO sum, UnO bmiss,  UnO inst,   Ord sum, Ord bmiss,  Ord inst,      Size
	   263015,      4029,    126942,    263015,        20,    126942,      8192
	   523576,      8296,    254190,    523576,        11,    254189,     16384
	  1035730,     16220,    507234,   1035730,        21,    507234,     32768
	  2072988,     32780,   1013818,   2072988,        21,   1013820,     65536
	  4166136,     65688,   2029381,   4166136,        25,   2029381,    131072
	  8349804,    130767,   4059909,   8349804,        24,   4059907,    262144
	 16685740,    262042,   8119142,  16685740,        17,   8119141,    524288
	 33278210,    523764,  16231504,  33278210,        52,  16231501,   1048576
	 66583919,   1048175,  32464552,  66583919,       119,  20251254,   2097152
	133122233,   2096583,  64925626, 133122233,        14,  45348932,   4194304


  Notice the difference in bmiss and inst after 1 M? Now if we can make each of
  those memory accesses take more time (basically miss in the cache), we might
  be able to stall the program horribly.
